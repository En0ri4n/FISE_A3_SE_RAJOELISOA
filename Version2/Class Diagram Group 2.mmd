 classDiagram
    class Menu {
        <<enumeration>>
        Main
        Job
        JobResult
        JobSetting
        Language
        LogType
    }

    class EasySaveCli {
        - List~Menu~ menuHistory
        + EasySaveCli() : void
        - AddToMenuHistory(Menu menuName) : void
        - Exit() : void
        - GoBack() : void
        # DisplayMainMenu() : void
        # DisplayJobMenu() : void
        # DisplayLanguageMenu() : void
        # DisplayLogTypeMenu() : void
        # DisplayJobResultMenu() : void
        # DisplayJobSettingsMenu() : void
    }

    class ViewModelJobBuilder {
        - string _initialName
        + string InitialName
        + event PropertyChangedEventHandler PropertyChanged
        + Clear() : void
        + GetFrom(TJob) : void
        + Build(bool) : TJob
        # OnPropertyChanged(string) : void
        # SetField~T~(ref T, T, string) : bool
    }

    class ViewModelBackupJobBuilder {
        - string _name
        + string Name
        - string _source
        + string Source
        - string _target
        + string Target
        - StrategyType _strategyType
        + StrategyType StrategyType
        - bool _isEncrypted
        + bool IsEncrypted
        + StrategyType[] AvailableStrategies
        + ICommand ShowFolderDialogCommand
        + ViewModelBackupJobBuilder
        + Clear() : void
        + GetFrom(BackupJob) : void
        + Build(bool) : BackupJob
    }

    class BackupJob {
        +DateTime Timestamp
        +string Source
        +string Target
        +StrategyType StrategyType
        +bool IsEncrypted
        +long Size
        +long TransferTime
        +long EncryptionTime
        +double Progress
        +bool IsRunning
        +string Name
        +ExecutionStatus Status
        +List~BackupJobTask~ BackupJobTasks
        +void RunJob()
        +void CompleteJob(ExecutionStatus status)
        +void OnTaskCompleted(dynamic task)
        +void ClearTasksAndProgress()
        +void ClearTaskCompletedHandler()
        +void ClearJobCompletedHandler()
        +bool CanRunJob()
        +JsonObject JsonSerialize()
        +void JsonDeserialize(JsonObject data)
        +XmlElement XmlSerialize(XmlDocument parent)
        +void XmlDeserialize(XmlElement data)
    }

    class BackupJobManager {
        +BackupJob? CurrentRunningJob
        +event JobInterruptedHandler
        +BackupJobManager()
        +AddJob(BackupJob job, bool save) : bool
        +AddJob(JsonObject? jobJson) : bool
        +RemoveJob(BackupJob? job) : bool
        +UpdateJob(string name, JsonObject? jobJson) : void
        +UpdateJob(string name, BackupJob? job) : bool
        +DoAllJobs() : void
        +event PropertyChangedEventHandler? PropertyChanged
        -DoJob(BackupJob job) : void
        -DoMultipleJob(ObservableCollection~BackupJob~ jobs) : void
        -OnPropertyChanged(string? propertyName) : void
    }

    class JobManager {
        <<abstract>>
        # List<TJob> Jobs
        # int Size
        + AddJob(TJob job)* : bool
        + AddJob(JsonObject? jobJson)* : bool
        + RemoveJob(TJob job)* : bool
        + UpdateJob(string name, JsonObject? jobJson) : void
        + UpdateJob(string name, TJob? job) : void
        + RemoveJob(string name) : bool
        + RemoveAllJobs() : bool
        + GetJob(string name) : TJob
        + GetJobs() : List<TJob>
        # DoAllJobs(ExecutionFlowType flowType, JobExecutionStrategy.StrategyType strategy)* : void
        # DoJob(string name, JobExecutionStrategy.StrategyType strategy)* : void
    }

    class BackupJobTask {
        + Property Timestamp
        + Property Source
        + Property Target
        + Property Size
        + Property TransferTime
        + BackupJobTask(BackupJob backupJob, string source, string target) : base(backupJob.Name) : void
        + ExecuteTask(StrategyType strategyType) : ExecutionStatus
        + JsonSerialize() : JsonObject
        + JsonDeserialize(JsonObject data) : void
        + XmlSerialize() : XmlElement
        - FilesAreEqual_Hash(FileInfo first, FileInfo second)$ : bool
    }

    class L10N~TJob~ {
        - L10N~TJob~ Instance 
        - LangIdentifier _currentLang
        - Dictionary~string, string~ _translations
        - L10N() : void
        + SetLanguage(LangIdentifier lang) : void
        + GetLanguage() : LangIdentifier
        - LoadTranslations() : void
        + GetTranslation(key : string, parameters? : string[]) : string
        + Get() : L10N<TJob>
    }

    class LangIdentifier {
        + string LangId
        + string Name
        + string IsoCode
        + LangIdentifier(string, string, string)
    }

    class Languages {
        <<static>>
        + LangIdentifier EnUs
        + LangIdentifier FrFr
        + LangIdentifier IdId
        + LangIdentifier MgMg
        + LangIdentifier ZhCn

        + List~LangIdentifier~ SupportedLangs
    }

    %% class LocExtension {
    %%     - string _key
    %%     + string key
    %%     + strig Value
    %%     + LocExtension(string)
    %%     - OnLanguageChanged(object, EventArgs) : void
    %%     + ProvideValue(IServiceProvider) : object
    %%     + event PropertyChangedEventHandler? PropertyChanged
    %%     # OnPropertyChanged(string) : void 
    %% }

    class Format {
        <<enumeration>>
        + Json
        + Xml
    }

    class Logger {
        _ string _dailyLogPath
        + string DailyLogPath
        _ string _statusLogPath
        + string StatusLogPath
        _ Format _dailyLogFormat
        + Format DailyLogFormat
        - static Logger Instance
        - Logger()
        + Log(LogLevel level, string message)$ : void
        + LogInternal(LogLevel level, string message) : void
        + Get()$ : Logger
        + SaveDailyLog(IJob job, List<JobTask> tasks) : void
        - LogToFile(StatusLogEntry logEntry) : void
        - GetStatusLogFilePath() : string
        - GetDailyLogFilePath() : string
        - JsonSerialize(IJob job, List<JobTask> tasks) : JsonObject
        - XmlSerialize(IJob job, List<JobTask> tasks) : XmlElement
    }

    class StatusLogEntry {
        + LogLevel Level
        + string Message
        + DateTime Timestamp
    }

    class JobExecutionStrategy {
        <<abstract>>
        - IJob _job
        - StrategyType _type
        - ExecutionStatus _status
        + IJob Job
        + StrategyType Type
        + ExecutionStatus Status
        # JobExecutionStrategy(IJob job, StrategyType strategyType) : void
        + ExecuteJob()* : void
    }

    class StrategyType {
        <<enumeration>>
        + Full
        + Differential
    }

    class ExecutionStatus {
        <<enumeration>>
        + NotStarted
        + CanNotStart
        + InProgress
        + Completed
        + Skipped
        + Failed
    }

    class JobTask {
        <<abstract>>
        -string _name
        +string Name
        +JobExecutionStrategy.ExecutionStatus Status
        +JobTask(string name)
        +ExecuteTask(JobExecutionStrategy.StrategyType strategyType)* : void
        +JsonSerialize()* : JsonObject
        +JsonDeserialize(JsonObject data)* : void
        +XmlSerialize(XmlDocument parent)* : XmlElement
        +XmlDeserialize(XmlElement data)* : void
    }

    class ProcessHelper {
        - ProcessHelper Instance$
        + ProcessHelper Get()$
        + IsExactProcessRunning(string processName)$ : bool
        + IsProcessRunning(string processName)$ : bool
        + IsAnyProcessRunning(string[] processNames)$ : bool
    }

    class EasySaveConfigurationBase {
        <<abstract>>
        + SaveConfiguration()* : void
        + LoadConfiguration()* : void
        + JsonSerialize()* : JsonObject
        + JsonDeserialize(JsonObject data)* : void
    }

    class BackupJobConfiguration {
        - const string ConfigPath = "config.json"
        - static BackupJobConfiguration Instance
        - ObservableCollection~string~ _extensionsToEncrypt
        + ObservableCollection~string~ ExtensionsToEncrypt
        - ObservableCollection~string~ _processesToBlacklist
        + ObservableCollection~string~ ProcessesToBlacklist
        - string _encryptionKey
        + string EncryptionKey
        + BackupJobConfiguration()
        + Get() : BackupJobConfiguration
        - static Logger Logger
        + JsonSerialize() : JsonObject
        + JsonDeserialize(JsonObject data) : void
        + static SaveConfiguration() : void
        + static LoadConfiguration() : void
    }

    class ExecutionFlowType {
        <<enumeration>>
        + Sequential
        + Parallel
    }

    class Languages {
        + static List<LangIdentifier> SupportedLangs
    }

    class IJob {
        <<interface>>
        + string Name
        + ExecutionStatus Status
        + delegate TaskCompletedDelegate(dynamic) : void 
        + event TaskCompletedDelegate TaskCompletedHandler
        + ClearJobCompletedHandler() : void 
        + ClearTaskCompletedHandler() : void
        + delegate JobCompletedDelegate(IJob) : void 
        + event JobCompletedDelegate JobCompletedHandler
        + ClearJobCompletedHandler() : void 
        + bool IsRunning
        + CanRunJob() : bool
        + RunJob() : void
    }

    class IJsonSerializable {
        <<interface>>
        + JsonSerialize() : JsonObject
        + JsonDeserialize(JsonObject data) : void
    }

    class IXmlSerializable {
        <<interface>>
        + XmlSerialize() : XmlElement
        + XmlDeserialize(XmlElement data) : void
    }

    class RelayCommand {
        - Action~object?~ _execute
        - Func~object?, bool~? _canExecute
        + RelayCommand(Action~object?~ execute, Func~object?, bool~? canExecute = null)
        + CanExecute(object? parameter) : bool
        + Execute(object? parameter) : void
        + event EventHandler? CanExecuteChanged
        + RaiseCanExecuteChanged() : void
    }

    class EasySaveViewModelBase~TJob, TJobManager~ {
        + TJobManager JobManager
        + ViewModelJobBuilder~TJob~ JobBuilder
        + InitializeViewModel(TJobManager jobManager) : void
        + SetJobBuilder(ViewModelJobBuilder~TJob~ jobBuilder) : void
        # InitializeCommand()* : void
        # even PropertyChangedEventHandler? PropertyChanged*
    }

    class EasySaveView~TJob, TJobManager, TConfiguration, TViewModel, TViewModelObjectBuilder~ {
        - L10N~TJob~ L10N
        + EasySaveCore~TJob, TJobManager, TConfiguration~ Core
        - TViewModel ViewModel
        + EasySaveView(EasySaveCore~TJob, TJobManager, TConfiguration~ core, TViewModel viewModel, TViewModelObjectBuilder viewModelObjectBuilder)
        + GetJobBuilder() : TViewModelObjectBuilder
        # DisplayMainMenu()* : void
        # DisplayJobMenu()* : void
        # DisplayLanguageMenu()* : void
        # DisplayLogTypeMenu()* : void
        # DisplayJobResultMenu(int jobNumber)* : void
        # DisplaySettingsMenu()* : void
        # DisplayJobListMenu()* : void
        # DisplayRunMenu()* : void
        # DisplayRunMultipleMenu()* : void
        # DisplayRunAllMenu()* : void
        # DisplayCreateJobMenu()* : void
        # DisplayModifyJobMenu()* : void
        # DisplayDeleteJobMenu()* : void
        # DisplayDailyLogDirectoryMenu()* : void
        # DisplayStatusLogDirectoryMenu()* : void
    }

    class BackupJobViewModel {
        +static Get() : BackupJobViewModel
        +List<LangIdentifier> AvailableLanguages
        +LangIdentifier CurrentApplicationLang
        +List<Format> AvailableDailyLogFormats
        +Format CurrentDailyLogFormat
        +string DailyLogPath
        +string StatusLogPath
        +string StatusLogFilePath
        +string DailyLogFilePath
        +ObservableCollection<BackupJob> AvailableJobs
        +BackupJob SelectedJob
        +string TempEncryptionKey
        +ObservableCollection<string> ExtensionsToEncrypt
        +ObservableCollection<string> ProcessesToBlacklist
        +string NewExtensionToEncrypt
        +string NewProcessToBlacklist
        +ICommand BuildJobCommand
        +ICommand SelectedJobCommand
        +ICommand LoadJobInBuilderCommand
        +ICommand DeleteJobCommand
        +ICommand RunJobCommand
        +ICommand RunMultipleJobsCommand
        +ICommand RunAllJobsCommand
        +ICommand ChangeRunStrategyCommand
        +ICommand ShowFolderDialogCommand
        +ICommand ResetFolderLogPathCommand
        +ICommand AddProcessToBlacklistCommand
        +ICommand RemoveProcessToBlacklistCommand
        +ICommand AddExtensionToEncryptCommand
        +ICommand RemoveExtensionToEncryptCommand
        +ICommand LoadEncryptionKeyCommand
        +ICommand SaveEncryptionKeyCommand
        +Action CloseAction
        -void InitializeCommand()
    }

    class EasySaveCore~TJob~ {
        + static Version Version
        + const string Name
        - static EasySaveCore~TJob, TJobManager, TConfiguration~ _instance
        - EasySaveCore(EasySaveViewModelBase<TJob, TJobManager> easySaveViewModelBase, TJobManager jobManager, TConfiguration configuration)
        + static Init(EasySaveViewModelBase<TJob, TJobManager> easySaveViewModelBase, TJobManager jobManager, TConfiguration configuration) : EasySaveCore~TJob, TJobManager, TConfiguration~
        + static Get() : EasySaveCore~TJob, TJobManager, TConfiguration~
    }

    %% Relationships
    ViewModelJobBuilder --> IViewModelObjectBuilder : Implements
    ViewModelJobBuilder o-- BackupJob : Aggregates
    BackupJobManager o-- BackupJob : Aggregates
    BackupJob o-- BackupJobTask : Aggregates
    BackupJob --> IJob : Implements
    BackupJobManager o-- IJob : Aggregates
    BackupJobManager ..|> JobManager : Inherits
    Logger --> IJob : Logs
    L10N --> IJob : Provides Translations
    L10N --> LangIdentifier : Uses
    Languages o-- LangIdentifier : Contains
    JobTask o-- Property : Aggregates
    IJob o-- JobTask : Aggregates
    JobManager o-- IJob : Aggregates
    JobManager ..> ExecutionFlowType : depends on
    BackupJobManager ..> ExecutionFlowType : depends on
    Logger o-- StatusLogEntry : Aggregates
    Logger ..> Format : depends on
    IJob --> IJsonSerializable : Implements
    IJob --> IXmlSerializable : Implements
    JobExecutionStrategy "1" --> "1" StrategyType : Depends On
    JobExecutionStrategy "1" --> "1" ExecutionStatus : Depends On
    JobExecutionStrategy "1" --> "1" IJob : Depends On
    BackupJobConfiguration --> Logger~TJob~ : Uses
    BackupJobConfiguration --> IJsonSerializable : Implements
    BackupJobConfiguration --> BackupJobViewModel~TJob~ : Uses
    BackupJobConfiguration --> L10N~TJob~ : Uses
    BackupJobConfiguration --> IJob : Uses
    EasySaveCore~TJob, TJobManager, TConfiguration~ --> BackupJobConfiguration : Initializes
    EasySaveCore~TJob, TJobManager, TConfiguration~ --> EasySaveConfigurationBase : Loads Configuration
    EasySaveCore~TJob, TJobManager, TConfiguration~ --> Logger~TJob~ : Logs Start Message
    EasySaveCli --|> EasySaveView~TJob~ : Implements
    EasySaveCli --> EasySaveCore~TJob, TJobManager, TConfiguration~ : Uses
    EasySaveCli --> BackupJobViewModel~TJob~ : Uses
    EasySaveCli ..> Format : depends on
    EasySaveCli ..> Menu : depends on
    BackupJobViewModel ..> ViewModelBackupJobBuilder
    BackupJobManager ..> ProcessHelper
    BackupJobConfiguration --|> EasySaveConfigurationBase : inherits
    BackupJobViewModel ..> RelayCommand : depends on
    BackupJobViewModel --|> EasySaveViewModelBase : inherits
    EasySaveCore ..> EasySaveViewModelBase : depends on