<Window x:Class="Easy_Save_WPF.OptionsPopup"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:hc="https://handyorg.github.io/handycontrol"
        xmlns:Flags="clr-namespace:FamFamFam.Flags.Wpf;assembly=FamFamFam.Flags.Wpf"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:local="clr-namespace:CLEA.EasySaveCore.L10N;assembly=Easy-Save-Core"
        Title="Options" Height="750" Width="800" WindowStartupLocation="CenterOwner" Background="#FAFAFA" 
        ResizeMode="NoResize"
        FontFamily="Segoe UI" Icon="/Options_PopUp.ico">

    <Window.Resources>
        <Flags:CountryIdToFlagImageSourceConverter x:Key="CountryIdToFlagImageSourceConverter" />

        <!-- Main buttons style -->
        <Style TargetType="Button">
            <Setter Property="Background" Value="#4A90E2"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Padding" Value="6,3"/>
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                CornerRadius="5" 
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#357ABD"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#2E5C9D"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="#B0B0B0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Secondary buttons style -->
        <Style x:Key="SecondaryButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#4A90E2"/>
            <Setter Property="BorderBrush" Value="#4A90E2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="5" 
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#E6F0FF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#C3D6FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#B0B0B0"/>
                                <Setter Property="BorderBrush" Value="#B0B0B0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Reset buttons style -->
        <Style x:Key="ResetButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Background" Value="#A9A9A9"/>
            <Setter Property="Foreground" Value="#A9A9A9"/>
            <Setter Property="BorderBrush" Value="#A9A9A9"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" 
                CornerRadius="5" 
                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" TextElement.Foreground="#FAF9F6"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#36454F"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#36454F"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#36454F"/>
                                <Setter Property="BorderBrush" Value="	#36454F"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Save buttons style -->
        <Style x:Key="SaveButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Background" Value="#228B22"/>
            <Setter Property="Foreground" Value="#228B22"/>
            <Setter Property="BorderBrush" Value="	#228B22"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" 
                CornerRadius="5" 
                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" TextElement.Foreground="#FAF9F6"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#355E3B"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#355E3B"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#355E3B"/>
                                <Setter Property="BorderBrush" Value="	#355E3B"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Delete buttons style -->
        <Style x:Key="DeleteButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Background" Value="#FF0000"/>
            <Setter Property="Foreground" Value="#BF0000"/>
            <Setter Property="BorderBrush" Value="#BF0000"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="5" 
                        Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" TextElement.Foreground="#FAF9F6"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#800000"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#800000"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#B0B0B0"/>
                                <Setter Property="BorderBrush" Value="#B0B0B0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Couleurs -->
        <SolidColorBrush x:Key="PrimaryBrush" Color="#303030"/>
        <SolidColorBrush x:Key="DangerBrush" Color="#BB1000"/>
        <SolidColorBrush x:Key="PressedBrush" Color="SlateGray"/>

        <!-- Style bouton icône -->
        <Style x:Key="ColoredIconButton" TargetType="Button">
            <Setter Property="Width" Value="48"/>
            <Setter Property="Height" Value="48"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="6,0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                CornerRadius="6"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Button.Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="Black" Direction="320" ShadowDepth="4" BlurRadius="10" Opacity="0.5" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource PressedBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="#BDBDBD"/>
                                <Setter Property="Foreground" Value="#757575"/>
                                <Setter Property="Cursor" Value="Arrow"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- TextBlock for Labels style -->
        <Style TargetType="TextBlock" x:Key="LabelStyle">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Width" Value="auto"/>
        </Style>

        <!-- ListBox style -->
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#CCC"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Margin" Value="0,5"/>
        </Style>

        <!-- TextBlock white background -->
        <Style x:Key="InfoBoxStyle" TargetType="TextBlock">
            <Setter Property="Background" Value="#F0F0F0"/>
            <Setter Property="Padding" Value="6"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Width" Value="400"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
            <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource Self}}"/>
        </Style>

        <!-- TextBox white background -->
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="#F0F0F0"/>
            <Setter Property="Padding" Value="6"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Width" Value="400"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource Self}}"/>
        </Style>
    </Window.Resources>

    <ScrollViewer>
        <Grid Margin="20,20,20,20">
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="0*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto" MinHeight="0"/>
        </Grid.RowDefinitions>

        <!-- Title -->
            <Button HorizontalAlignment="Right" ToolTip="Config_File" Style="{StaticResource ColoredIconButton}" Click="configFileBTN_Click">
            <materialDesign:PackIcon Kind="File" Width="24" Height="24"/>
        </Button>
        <TextBlock Text="{local:Loc options_popup.title}" FontSize="30" FontWeight="Bold" Margin="0,0,0,8" Grid.Row="0" HorizontalAlignment="Center" Foreground="#333" Width="406"/>
            
        <!-- Subtitle -->
        <TextBlock Text="{local:Loc options_popup.subtitle}" FontSize="18" Margin="0,0,0,20" Grid.Row="1" HorizontalAlignment="Center" Foreground="#666" Width="246"/>

        <!-- Body -->
        <StackPanel Grid.Row="2" VerticalAlignment="Center" Height="594">
            <!-- Language -->
            <StackPanel Orientation="Horizontal" Margin="0 0 0 18">
                <TextBlock Text="{local:Loc options_popup.language}" Style="{StaticResource LabelStyle}" Width="auto"/>
                <ComboBox ItemsSource="{Binding AvailableLanguages}"
                  UseLayoutRounding="True" 
                  SelectedItem="{Binding CurrentApplicationLang, Mode=TwoWay}"
                  Width="200" FontSize="14" Padding="4">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Image Source="{Binding IsoCode, Converter={StaticResource CountryIdToFlagImageSourceConverter}}" 
                                   Width="23" Height="18" 
                                   Stretch="None" 
                                   RenderOptions.BitmapScalingMode="HighQuality" 
                                   VerticalAlignment="Center" />
                                <TextBlock Text="{Binding Name}" Margin="5,0,0,0" VerticalAlignment="Center" FontWeight="Normal"/>
                            </StackPanel>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </StackPanel>

            <!-- Log Type -->
            <StackPanel Orientation="Horizontal" Margin="0 0 0 18">
                <TextBlock Text="{local:Loc options_popup.log_type}" Style="{StaticResource LabelStyle}" Width="auto"/>
                <ComboBox Name="LogTypeComboBox" Width="200" FontSize="14" Padding="4" ItemsSource="{Binding AvailableDailyLogFormats}"
                           SelectedItem="{Binding CurrentDailyLogFormat, Mode=TwoWay}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" Margin="5,0,0,0" VerticalAlignment="Center" FontWeight="Normal"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </StackPanel>

            <!-- Daily Log Directory -->
            <Grid Margin="0 0 0 18">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Label + Path -->
                <StackPanel Orientation="Horizontal" Grid.Column="0">
                    <TextBlock Text="{local:Loc options_popup.daily_log_dir}" Style="{StaticResource LabelStyle}" VerticalAlignment="Center"/>
                    <TextBlock Name="DailyLogPathText" Text="{Binding DailyLogPath}" Style="{StaticResource InfoBoxStyle}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                </StackPanel>

                <!-- Buttons -->
                <Button Grid.Column="1" Content="{local:Loc common.browse}" Command="{Binding ShowFolderDialogCommand}" CommandParameter="true" Style="{StaticResource SecondaryButtonStyle}" Margin="10,0,0,0"/>
                <Button Grid.Column="2" Content="{local:Loc common.reset}" Command="{Binding ResetFolderLogPathCommand}" CommandParameter="true" Style="{StaticResource ResetButtonStyle}" Margin="10,0,0,0"/>
            </Grid>

            <!-- Status Log Directory -->
            <Grid Margin="0 0 0 18">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Label + Path -->
                <StackPanel Orientation="Horizontal" Grid.Column="0">
                    <TextBlock Text="{local:Loc options_popup.status_log_dir}" Style="{StaticResource LabelStyle}" VerticalAlignment="Center"/>
                    <TextBlock Name="StatusLogPathText" Text="{Binding StatusLogPath}" Style="{StaticResource InfoBoxStyle}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                </StackPanel>

                <!-- Buttons -->
                <Button Grid.Column="1" Content="{local:Loc common.browse}" Command="{Binding ShowFolderDialogCommand}" CommandParameter="false" Style="{StaticResource SecondaryButtonStyle}" Margin="10,0,0,0"/>
                <Button Grid.Column="2" Content="{local:Loc common.reset}" Command="{Binding ResetFolderLogPathCommand}" CommandParameter="false" Style="{StaticResource ResetButtonStyle}" Margin="10,0,0,0"/>
            </Grid>

            <!-- Encryption Key -->
            <Grid Margin="0 0 0 18">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!-- Label + Path -->
                <StackPanel Orientation="Horizontal" Grid.Column="0">
                    <TextBlock Text="{local:Loc options_popup.encryption_key}" Style="{StaticResource LabelStyle}" VerticalAlignment="Center"/>
                    <TextBox Name="EncryptionKeyText" Text="{Binding TempEncryptionKey}" Style="{StaticResource TextBoxStyle}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                </StackPanel>

                <!-- Buttons -->
                <Button Grid.Column="1" Content="{local:Loc common.save}" Command="{Binding SaveEncryptionKeyCommand}" CommandParameter="{Binding TempEncryptionKey}" Style="{StaticResource SaveButtonStyle}" Margin="10,0,0,0"/>
            </Grid>

            <!-- Extensions -->
            <StackPanel Margin="0 0 0 18">
                <TextBlock Text="{local:Loc options_popup.extensions_encryption}" FontSize="16" FontWeight="SemiBold" Margin="0 0 0 0"/>

                    <ListBox ItemsSource="{Binding ExtensionsToEncrypt}" Height="100" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                        <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Stretch" Margin="0,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Text="{Binding}" FontSize="14" VerticalAlignment="Center" Grid.Column="0"/>
                                <Button Content="{local:Loc common.delete}" Grid.Column="1"
                                        Command="{Binding DataContext.RemoveExtensionToEncryptCommand, RelativeSource={RelativeSource AncestorType=ListBox}}" 
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource DeleteButtonStyle}"
                                        Margin="0 0 5 0" Padding="3,1"/>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Orientation="Horizontal" Margin="0 6 0 0">
                    <TextBox Text="{Binding NewExtensionToEncrypt, UpdateSourceTrigger=PropertyChanged}" Width="150" Margin="0 0 10 0" Padding="4" Style="{x:Null}"/>
                    <Button Content="{local:Loc common.add}" Command="{Binding AddExtensionToEncryptCommand}" CommandParameter="{Binding NewExtensionToEncrypt}" Style="{StaticResource SecondaryButtonStyle}"/>
                </StackPanel>
            </StackPanel>

            <!-- Processes blacklist -->
            <StackPanel Margin="0 0 0 18">
                <TextBlock Text="{local:Loc options_popup.processes_blacklist}" FontSize="16" FontWeight="SemiBold" Margin="0 0 0 0"/>

                <ListBox ItemsSource="{Binding ProcessesToBlacklist}" Height="100" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Stretch" Margin="0,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Text="{Binding}" FontSize="14" VerticalAlignment="Center" Grid.Column="0" Style="{x:Null}"/>
                                <Button Content="{local:Loc common.delete}" Grid.Column="1"
                                        Command="{Binding DataContext.RemoveProcessToBlacklistCommand, RelativeSource={RelativeSource AncestorType=ListBox}}" 
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource DeleteButtonStyle}"
                                        Margin="0 0 5 0" Padding="3,1"/>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <StackPanel Orientation="Horizontal" Margin="0 6 0 0">
                    <TextBox Text="{Binding NewProcessToBlacklist, UpdateSourceTrigger=PropertyChanged}" Width="150" Margin="0 0 10 0" Padding="4" Style="{x:Null}"/>
                    <Button Content="{local:Loc common.add}" Command="{Binding AddProcessToBlacklistCommand}" CommandParameter="{Binding NewProcessToBlacklist}" Style="{StaticResource SecondaryButtonStyle}"/>
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <!-- Footer -->
        <StackPanel Grid.Row="3" HorizontalAlignment="Right" Margin="0,0,0,0" Width="100">
            <Button Content="{local:Loc common.close}" Width="90" Click="CloseButton_Click"/>
        </StackPanel>
    </Grid>
    </ScrollViewer>
</Window>
